class Solution {
public:
    vector<vector<int>> memo;
    
    bool dfs(string& s1, string& s2, string& s3, int i, int j)
    {
        if(i+j == s1.size() + s2.size())
        {
            return true;
        }
        if(memo[i][j] != -1)
        {
            return memo[i][j];
        }
        if(i<s1.size() && s1[i] == s3[i+j])
        {
            if(dfs(s1, s2, s3, i+1, j))
            {
                return memo[i][j] = true;
            }
        }
        if(j<s2.size() && s2[j] == s3[i+j])
        {
            if(dfs(s1, s2, s3, i, j+1))
            {
                return memo[i][j] = true;
            }
        }
        return memo[i][j] = false;
    }
    
    bool isInterleave(string s1, string s2, string s3) {
      if(s1.length() + s2.length() != s3.length())
      {
          return false;
      }
        int m = s1.size(), n=s2.size();
        memo = vector<vector<int>>(m+1, vector<int>(n+1, -1));
        return dfs(s1, s2, s3, 0, 0);
       
    }
};
